
TimerCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000923  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bd  00000000  00000000  00001c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	87 d0       	rcall	.+270    	; 0x1b8 <main>
  aa:	b0 c0       	rjmp	.+352    	; 0x20c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:

// ATmega128은 16MHz의 시스템 클록을 사용하므로
// 64의 분주비를 사용하면 64 * 256 / 16M = 1.024ms마다 
// 오버플로 인터럽트가 발생한다.

ISR(TIMER0_OVF_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	uint32_t m = timer0_millis;
  e0:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  ec:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	uint16_t f = timer0_micros;
  f0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <timer0_micros>
  f4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <timer0_micros+0x1>
	
	m += 1;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	c8 1a       	sub	r12, r24
  fc:	d8 0a       	sbc	r13, r24
  fe:	e8 0a       	sbc	r14, r24
 100:	f8 0a       	sbc	r15, r24
	f += 24;
 102:	48 5e       	subi	r20, 0xE8	; 232
 104:	5f 4f       	sbci	r21, 0xFF	; 255
	
	m += f / 1000;
 106:	ea 01       	movw	r28, r20
 108:	d6 95       	lsr	r29
 10a:	c7 95       	ror	r28
 10c:	d6 95       	lsr	r29
 10e:	c7 95       	ror	r28
 110:	d6 95       	lsr	r29
 112:	c7 95       	ror	r28
 114:	9e 01       	movw	r18, r28
 116:	a5 ec       	ldi	r26, 0xC5	; 197
 118:	b0 e2       	ldi	r27, 0x20	; 32
 11a:	69 d0       	rcall	.+210    	; 0x1ee <__umulhisi3>
 11c:	fc 01       	movw	r30, r24
 11e:	f2 95       	swap	r31
 120:	e2 95       	swap	r30
 122:	ef 70       	andi	r30, 0x0F	; 15
 124:	ef 27       	eor	r30, r31
 126:	ff 70       	andi	r31, 0x0F	; 15
 128:	ef 27       	eor	r30, r31
 12a:	ce 0e       	add	r12, r30
 12c:	df 1e       	adc	r13, r31
 12e:	e1 1c       	adc	r14, r1
 130:	f1 1c       	adc	r15, r1
	f %= 1000;
 132:	28 ee       	ldi	r18, 0xE8	; 232
 134:	33 e0       	ldi	r19, 0x03	; 3
 136:	e2 9f       	mul	r30, r18
 138:	c0 01       	movw	r24, r0
 13a:	e3 9f       	mul	r30, r19
 13c:	90 0d       	add	r25, r0
 13e:	f2 9f       	mul	r31, r18
 140:	90 0d       	add	r25, r0
 142:	11 24       	eor	r1, r1
 144:	48 1b       	sub	r20, r24
 146:	59 0b       	sbc	r21, r25
	
	timer0_millis = m;
 148:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 154:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	timer0_micros = f;
 158:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <timer0_micros+0x1>
 15c:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <timer0_micros>
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	bf 91       	pop	r27
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	7f 91       	pop	r23
 172:	6f 91       	pop	r22
 174:	5f 91       	pop	r21
 176:	4f 91       	pop	r20
 178:	3f 91       	pop	r19
 17a:	2f 91       	pop	r18
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	cf 90       	pop	r12
 184:	0f 90       	pop	r0
 186:	0b be       	out	0x3b, r0	; 59
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <millis>:

// 실행시간을 측정하기 위해 사용할 수 있다.
uint32_t millis() {
	uint8_t oldSREG = SREG;
 192:	2f b7       	in	r18, 0x3f	; 63
	cli();
 194:	f8 94       	cli
	
	uint32_t m = timer0_millis;
 196:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	SREG = oldSREG;
 1a6:	2f bf       	out	0x3f, r18	; 63
	return m;
}
 1a8:	08 95       	ret

000001aa <TIMER0_init>:

void TIMER0_init() {
	TCCR0 |= nth(CS02); // 분주비 64 설정
 1aa:	83 b7       	in	r24, 0x33	; 51
 1ac:	84 60       	ori	r24, 0x04	; 4
 1ae:	83 bf       	out	0x33, r24	; 51
	TIMSK |= nth(TOIE0); // 오버플로 인터럽트 허용
 1b0:	87 b7       	in	r24, 0x37	; 55
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	87 bf       	out	0x37, r24	; 55
 1b6:	08 95       	ret

000001b8 <main>:
}

int main() {
	TIMER0_init();
 1b8:	f8 df       	rcall	.-16     	; 0x1aa <TIMER0_init>
	
	DDRB = 0x01;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	87 bb       	out	0x17, r24	; 23
	
	uint32_t prev = 0, cur;

	uint8_t state = 0x00;
	PORTB = state;	
 1be:	18 ba       	out	0x18, r1	; 24
	
	sei();
 1c0:	78 94       	sei
	
	DDRB = 0x01;
	
	uint32_t prev = 0, cur;

	uint8_t state = 0x00;
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
int main() {
	TIMER0_init();
	
	DDRB = 0x01;
	
	uint32_t prev = 0, cur;
 1c4:	c1 2c       	mov	r12, r1
 1c6:	d1 2c       	mov	r13, r1
	uint8_t state = 0x00;
	PORTB = state;	
	
	sei();
	loop {
		cur = millis();
 1c8:	76 01       	movw	r14, r12
 1ca:	e3 df       	rcall	.-58     	; 0x192 <millis>
		
		if (cur - prev > 1000) { // 1초 경과
 1cc:	8b 01       	movw	r16, r22
 1ce:	9c 01       	movw	r18, r24
 1d0:	0c 19       	sub	r16, r12
 1d2:	1d 09       	sbc	r17, r13
 1d4:	2e 09       	sbc	r18, r14
 1d6:	3f 09       	sbc	r19, r15
 1d8:	09 3e       	cpi	r16, 0xE9	; 233
 1da:	13 40       	sbci	r17, 0x03	; 3
 1dc:	21 05       	cpc	r18, r1
 1de:	31 05       	cpc	r19, r1
 1e0:	a0 f3       	brcs	.-24     	; 0x1ca <main+0x12>
			prev = cur;
			state ^= 1;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	c2 27       	eor	r28, r18
			PORTB = state;
 1e6:	c8 bb       	out	0x18, r28	; 24
	sei();
	loop {
		cur = millis();
		
		if (cur - prev > 1000) { // 1초 경과
			prev = cur;
 1e8:	6b 01       	movw	r12, r22
 1ea:	7c 01       	movw	r14, r24
 1ec:	ee cf       	rjmp	.-36     	; 0x1ca <main+0x12>

000001ee <__umulhisi3>:
 1ee:	a2 9f       	mul	r26, r18
 1f0:	b0 01       	movw	r22, r0
 1f2:	b3 9f       	mul	r27, r19
 1f4:	c0 01       	movw	r24, r0
 1f6:	a3 9f       	mul	r26, r19
 1f8:	70 0d       	add	r23, r0
 1fa:	81 1d       	adc	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	91 1d       	adc	r25, r1
 200:	b2 9f       	mul	r27, r18
 202:	70 0d       	add	r23, r0
 204:	81 1d       	adc	r24, r1
 206:	11 24       	eor	r1, r1
 208:	91 1d       	adc	r25, r1
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
