
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bd  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000806  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002de  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	16 d0       	rcall	.+44     	; 0xd6 <main>
  aa:	45 c0       	rjmp	.+138    	; 0x136 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
//FILE OUTPUT = FDEV_SETUP_STREAM(UART1_transmit, NULL, _FDEV_SETUP_WRITE);
//FILE INPUT = FDEV_SETUP_STREAM(NULL, UART1_receive, _FDEV_SETUP_READ);

uint8_t flag;

ISR(INT0_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	flag ^= 1;
  bc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:
int main() {
	//stdout = &OUTPUT;
	//stdin = &INPUT;
	//UART1_init();
	
	DDRB = 0xFF; // OUTPUT: LEDs
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
	PORTD = 0x01; // pull-up
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	92 bb       	out	0x12, r25	; 18
	
	EIMSK |= nth(INT0); // enable INT0 & INT1
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	89 bf       	out	0x39, r24	; 57
	// fall(´©¸¦¶§)
	EICRA |= nth(ISC01);
  e4:	ea e6       	ldi	r30, 0x6A	; 106
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	sei();
  ee:	78 94       	sei
	
	PORTB = 0x01;
  f0:	98 bb       	out	0x18, r25	; 24
	
	loop {
		PORTB = flag ? rrs(PORTB, 1) : lrs(PORTB, 1);
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f6:	88 23       	and	r24, r24
  f8:	49 f0       	breq	.+18     	; 0x10c <main+0x36>
  fa:	28 b3       	in	r18, 0x18	; 24
  fc:	80 e8       	ldi	r24, 0x80	; 128
  fe:	28 9f       	mul	r18, r24
 100:	90 01       	movw	r18, r0
 102:	11 24       	eor	r1, r1
 104:	88 b3       	in	r24, 0x18	; 24
 106:	86 95       	lsr	r24
 108:	82 2b       	or	r24, r18
 10a:	0a c0       	rjmp	.+20     	; 0x120 <main+0x4a>
 10c:	28 b3       	in	r18, 0x18	; 24
 10e:	98 b3       	in	r25, 0x18	; 24
 110:	89 2f       	mov	r24, r25
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	22 1f       	adc	r18, r18
 11a:	22 27       	eor	r18, r18
 11c:	22 1f       	adc	r18, r18
 11e:	82 2b       	or	r24, r18
 120:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	29 e6       	ldi	r18, 0x69	; 105
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	91 50       	subi	r25, 0x01	; 1
 12a:	20 40       	sbci	r18, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x52>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x5c>
 132:	00 00       	nop
 134:	de cf       	rjmp	.-68     	; 0xf2 <main+0x1c>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
