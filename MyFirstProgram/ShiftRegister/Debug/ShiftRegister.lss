
ShiftRegister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097e  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089e  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000096  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	27 d0       	rcall	.+78     	; 0x102 <main>
  b4:	68 c0       	rjmp	.+208    	; 0x186 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <shift_clock>:

typedef uint8_t u8;

void shift_clock()
{
	set_bit(SHIFT_CLOCK);
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 bb       	out	0x18, r24	; 24
	//_delay_us(1);
	clear_bit(SHIFT_CLOCK);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret

000000c6 <latch_clock>:
}

void latch_clock()
{
	set_bit(LATCH_CLOCK);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
	//_delay_us(1);
	clear_bit(LATCH_CLOCK);
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	08 95       	ret

000000d4 <shift_out>:
}

void shift_out(uint8_t data) 
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < 8; i++) {
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	0c c0       	rjmp	.+24     	; 0xf6 <shift_out+0x22>
		if (data & 0x80)
  de:	dd 23       	and	r29, r29
  e0:	24 f4       	brge	.+8      	; 0xea <shift_out+0x16>
			set_bit(DATA);
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <shift_out+0x1c>
		else
			clear_bit(DATA);
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	8b 7f       	andi	r24, 0xFB	; 251
  ee:	88 bb       	out	0x18, r24	; 24
			
			shift_clock();
  f0:	e3 df       	rcall	.-58     	; 0xb8 <shift_clock>
			data <<= 1;
  f2:	dd 0f       	add	r29, r29
	clear_bit(LATCH_CLOCK);
}

void shift_out(uint8_t data) 
{
	for (uint8_t i = 0; i < 8; i++) {
  f4:	cf 5f       	subi	r28, 0xFF	; 255
  f6:	c8 30       	cpi	r28, 0x08	; 8
			
			shift_clock();
			data <<= 1;
	}
	
	latch_clock();
  f8:	90 f3       	brcs	.-28     	; 0xde <shift_out+0xa>
  fa:	e5 df       	rcall	.-54     	; 0xc6 <latch_clock>
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <main>:
// FND 숫자 출력=======================================================

static const u8 digits[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F };

int main() {
	DDRB |= nth(SHIFT_CLOCK) | nth(LATCH_CLOCK) | nth(DATA);
 102:	87 b3       	in	r24, 0x17	; 23
 104:	87 60       	ori	r24, 0x07	; 7
 106:	87 bb       	out	0x17, r24	; 23
	
	u8 digit = 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
	loop {
		shift_out(~digits[digit]);
 10a:	c8 2f       	mov	r28, r24
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	fe 01       	movw	r30, r28
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	80 95       	com	r24
 118:	dd df       	rcall	.-70     	; 0xd4 <shift_out>
		digit = (digit + 1) % 10;
 11a:	ce 01       	movw	r24, r28
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0a d0       	rcall	.+20     	; 0x138 <__divmodhi4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	39 e6       	ldi	r19, 0x69	; 105
 128:	98 e1       	ldi	r25, 0x18	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x32>
 134:	00 00       	nop
 136:	e9 cf       	rjmp	.-46     	; 0x10a <main+0x8>

00000138 <__divmodhi4>:
 138:	97 fb       	bst	r25, 7
 13a:	07 2e       	mov	r0, r23
 13c:	16 f4       	brtc	.+4      	; 0x142 <__divmodhi4+0xa>
 13e:	00 94       	com	r0
 140:	06 d0       	rcall	.+12     	; 0x14e <__divmodhi4_neg1>
 142:	77 fd       	sbrc	r23, 7
 144:	08 d0       	rcall	.+16     	; 0x156 <__divmodhi4_neg2>
 146:	0b d0       	rcall	.+22     	; 0x15e <__udivmodhi4>
 148:	07 fc       	sbrc	r0, 7
 14a:	05 d0       	rcall	.+10     	; 0x156 <__divmodhi4_neg2>
 14c:	3e f4       	brtc	.+14     	; 0x15c <__divmodhi4_exit>

0000014e <__divmodhi4_neg1>:
 14e:	90 95       	com	r25
 150:	81 95       	neg	r24
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	08 95       	ret

00000156 <__divmodhi4_neg2>:
 156:	70 95       	com	r23
 158:	61 95       	neg	r22
 15a:	7f 4f       	sbci	r23, 0xFF	; 255

0000015c <__divmodhi4_exit>:
 15c:	08 95       	ret

0000015e <__udivmodhi4>:
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	51 e1       	ldi	r21, 0x11	; 17
 164:	07 c0       	rjmp	.+14     	; 0x174 <__udivmodhi4_ep>

00000166 <__udivmodhi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	a6 17       	cp	r26, r22
 16c:	b7 07       	cpc	r27, r23
 16e:	10 f0       	brcs	.+4      	; 0x174 <__udivmodhi4_ep>
 170:	a6 1b       	sub	r26, r22
 172:	b7 0b       	sbc	r27, r23

00000174 <__udivmodhi4_ep>:
 174:	88 1f       	adc	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	5a 95       	dec	r21
 17a:	a9 f7       	brne	.-22     	; 0x166 <__udivmodhi4_loop>
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	bc 01       	movw	r22, r24
 182:	cd 01       	movw	r24, r26
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
